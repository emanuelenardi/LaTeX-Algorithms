name: Compila documento LaTeX
on:
  push:
    branches:       
      - main                    # Push events on main branch
      - develop                 # Push events on develop branch
    paths-ignore:
      - '*'                    # ignores root files
      - '*/'                   # ignores root directories
      - '!/.github/build.yml'   # un-ignores this workflow
      - '!/src/'                # un-ignores the root 'src' directory
      - '/src/build/'           # ignores 'build' dir inside "src" dir
      - '/src/scripts/windows/' # ignores "windows scripts" dir
  pull_request:
    types: [opened, reopened, synchronize]
jobs:
  build_docs:
    name: Compila documento
    outputs:
      zip_name: ${{ steps.name.outputs.ZIP_NAME }}
      tag_name: ${{ steps.push-tag.outputs.new_tag }}
      part: ${{ steps.push-tag.outputs.part }}
    runs-on: ubuntu-latest
    steps:

      # Set up container
      - name: Step 1 - (1/3) Set up Java ‚òï
        uses: actions/setup-java@v1
        with:
          java-version: '11'
      - name: Step 1 - (2/3) Set up Python üêç
        uses: actions/setup-python@v2
        with:
          python-version: '3.8' # last cached version
      - name: Step 1 - (3/3) Set up Python üêç dependencies
        id: setup-python-dependencies
        run: pip install Pygments
      
      # Checkout branch and set environment variables
      - name: Step 2 - (1/2) Checkout üëÄ the main branch
        uses: actions/checkout@v2
        with:
          ref: main
      - name: Step 2 - (2/2) Setting üîß environment variables
        run: |
          echo "ROOT_DIR=$GITHUB_WORKSPACE" >> $GITHUB_ENV
          echo "BUILD_DIR=$GITHUB_WORKSPACE/src/build" >> $GITHUB_ENV
          echo "SCRIPT_DIR=$GITHUB_WORKSPACE/src/scripts/unix" >> $GITHUB_ENV
      
      # Compile LaTeX document
      - name: Step 3 - Compile ‚öôÔ∏è LaTeX document
        uses: xu-cheng/texlive-action/full@v1
        with:
          run: $SCRIPT_DIR/compile-project.sh

      - name: Step 4 - Bump version üîº & push tag üè∑Ô∏è
        if: ${{ success() }}
        id: push-tag
        uses: anothrNick/github-tag-action@1.34.0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          WITH_V: true
          RELEASE_BRANCHES: main, develop
          DEFAULT_BUMP: patch # default: minor
          DRY_RUN: true # for debugging purposes
          PRERELEASE_SUFFIX: preview

      # Prepare variables used to name the files
      - name: Step 5 - (1/2) Setting üîß environment variables
        run: |
          echo "TAG_NAME=${{ steps.push-tag.outputs.new_tag }}" >> $GITHUB_ENV
          echo "DATE=$(date -d '+1 hour' +'%Y.%m.%d_%H.%M')" >> $GITHUB_ENV
      - name: Step 5 - (2/2) Setting üîß environment variables
        id: name
        run: |
          echo "ZIP_NAME=dispensa-$TAG_NAME-$DATE" >> $GITHUB_ENV
          echo "::set-output name=ZIP_NAME::dispensa-$TAG_NAME-$DATE"

      - name: Step 6 - Create folder with pdfs
        run: |
          cd $BUILD_DIR
          mkdir $ZIP_NAME
          cp -r -t $ZIP_NAME chapters main.pdf

      - name: ‚ö†Ô∏è notifica cancellazione build ‚ö†Ô∏è
        if: ${{ cancelled() }}
        uses: appleboy/telegram-action@master
        with:
          to: ${{ secrets.TELEGRAM_TO }}
          token: ${{ secrets.TELEGRAM_TOKEN }}
          message: |
            @emanuelenardi *build #${{ env.GITHUB_RUN_NUMBER }} cancellata*, `[vedi log](https://github.com/emanuelenardi/latex-algorithms/actions)`
          format: markdown
          disable_web_page_preview: true

      - name: Step 7 - Upload artifact ‚è´
        if: ${{ success() }}
        uses: actions/upload-artifact@v2
        with:
          name: ${{ env.ZIP_NAME }}
          path: |
            ${{ env.BUILD_DIR }}
            !${{ env.BUILD_DIR }}/.gitignore
            !${{ env.BUILD_DIR }}/chapters
            !${{ env.BUILD_DIR }}/main.pdf
          if-no-files-found: error
          retention-days: 7

  send_docs:
    name: Manda file zip a Telegram
    needs: build_docs
    runs-on: ubuntu-latest
    steps:

      - name: Step 0 - Setting üîß environment variables
        run: |
          echo "ZIP_NAME=${{ needs.build_docs.outputs.zip_name }}" >> $GITHUB_ENV

      - name: Step 1 - Download artifact ‚è¨
        uses: actions/download-artifact@v2
        with:
          name: ${{ env.ZIP_NAME }}

      - name: Step 2 - Zip downloaded folder
        run: zip -r $ZIP_NAME.zip $ZIP_NAME

      - name: Step 3 - Send it to Telegram private channel
        if: ${{ success() }}
        uses: appleboy/telegram-action@master
        with:
          to: ${{ secrets.TELEGRAM_TO }}
          token: ${{ secrets.TELEGRAM_TOKEN }}
          message: ${{ github.event.head_commit.message }}
          document: ${{ env.ZIP_NAME }}.zip
      
  create_release:
    name: Crea una bozza di release
    needs: build_docs
    runs-on: ubuntu-latest
    steps:

      - name: Step 0 - Setting üîß environment variables
        run: |
          echo "ZIP_NAME=${{ needs.build_docs.outputs.zip_name }}" >> $GITHUB_ENV
          echo "TAG_NAME=${{ needs.build_docs.outputs.tag_name }}" >> $GITHUB_ENV

      - name: Step 0 - Check if there a new tag
        if: ${{ needs.build_docs.outputs.part == ('major' || 'minor' || 'patch') }}
        id: flag
        run: |
          echo "::set-output name=post_code::0"

      - name: Step 1 - Create a draft release ‚úèÔ∏è
        if: ${{ steps.flag.outputs.post_code == 0 }}
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.TAG_NAME }}
          release_name: Release ${{ env.TAG_NAME }}
          draft: true
          prerelease: true

      - name: Step 2 - (1/3) Download artifact ‚è¨
        if: ${{ steps.flag.outputs.post_code == 0 }}
        uses: actions/download-artifact@v2
        with:
          name: ${{ env.ZIP_NAME }}
      
      - name: Step 2 - (2/3) Zip downloaded folder
        if: ${{ steps.flag.outputs.post_code == 0 }}
        run: zip -r $ZIP_NAME.zip $ZIP_NAME

      - name: Step 2 - (3/3) Upload release asset ‚è´
        if: ${{ steps.flag.outputs.post_code == 0 }}
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ env.ZIP_NAME }}.zip
          asset_name: ${{ env.ZIP_NAME }}.zip
          asset_content_type: application/zip